name: Vue.js CI/CD

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

env:
  IMAGE_NAME: ${{ secrets.DOCKER_IMAGE }}
  CONTAINER_NAME: vue-cicd-demo

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    steps:
      # Checkout the repository
      - name: Checkout code
        uses: actions/checkout@v4

      # Set up Node.js
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '24'
          cache: 'npm'

      # Install dependencies
      - name: Install dependencies
        run: npm install

      # Run lint
      - name: Run lint
        run: npm run lint
        env:
          CI: true # Ensure linting runs in CI mode (e.g., for ESLint)

      # Run tests
      - name: Run tests
        run: npm run test:unit
        env:
          CI: true # Ensure tests run in CI mode (e.g., for Jest or Vitest)

      # Build the project
      - name: Build project
        run: npm run build

      # Set up Docker Buildx
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # Log in to Docker Hub
      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # Build and push Docker image
      - name: Build and push Docker image
        uses: docker/build-push-action@v6
        with:
          context: .
          push: ${{ github.event_name == 'push' && github.ref == 'refs/heads/main' }}
          tags: ${{ secrets.DOCKER_USERNAME }}/vuejs-app:latest
          cache-from: type=registry,ref=${{ secrets.DOCKER_USERNAME }}/vuejs-app:latest
          cache-to: type=inline

  # deploy:
  #   runs-on: ubuntu-latest
  #   needs: build-and-test # Run only after build-and-test succeeds
  #   if: github.event_name == 'push' && github.ref == 'refs/heads/main' # Only deploy on push to main

  #   steps:
  #     # Checkout the repository
  #     - name: Checkout code
  #       uses: actions/checkout@v4

  #     # Download build artifacts
  #     - name: Download build artifacts
  #       uses: actions/download-artifact@v4
  #       with:
  #         name: dist
  #         path: dist/

  #     # Deploy to remote server via SSH
  #     - name: Deploy to server
  #       uses: appleboy/scp-action@v0.1.4
  #       with:
  #         host: ${{ secrets.SERVER_HOST }}
  #         username: ${{ secrets.SERVER_USERNAME }}
  #         key: ${{ secrets.SERVER_SSH_KEY }}
  #         source: dist/*
  #         target: /usr/local/var/www/ # Adjust to your Nginx web root, e.g., /opt/homebrew/var/www for Apple Silicon
  #         rm: true # Remove existing files in target before copying
  #         strip_components: 1 # Avoid nesting dist folder in target
